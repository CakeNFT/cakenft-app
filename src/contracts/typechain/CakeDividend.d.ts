/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CakeDividendInterface extends ethers.utils.Interface {
  functions: {
    "accumulativeCakeOf(address,uint256)": FunctionFragment;
    "cake()": FunctionFragment;
    "cakeStaker()": FunctionFragment;
    "claimCake(address,uint256)": FunctionFragment;
    "claimableCakeOf(address,uint256)": FunctionFragment;
    "claimed(address,uint256)": FunctionFragment;
    "claimedCakeOf(address,uint256)": FunctionFragment;
    "pointsCorrection(address,uint256)": FunctionFragment;
    "stakedCakeBalances(address,uint256)": FunctionFragment;
    "totalStakedCakeBalance()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accumulativeCakeOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cakeStaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableCakeOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedCakeOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pointsCorrection",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedCakeBalances",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedCakeBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulativeCakeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cakeStaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimCake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableCakeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedCakeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsCorrection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedCakeBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedCakeBalance",
    data: BytesLike
  ): Result;

  events: {
    "ClaimCake(address,uint256,address,uint256)": EventFragment;
    "DistributeCake(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimCake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeCake"): EventFragment;
}

export class CakeDividend extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CakeDividendInterface;

  functions: {
    accumulativeCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "accumulativeCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cake(overrides?: CallOverrides): Promise<[string]>;

    "cake()"(overrides?: CallOverrides): Promise<[string]>;

    cakeStaker(overrides?: CallOverrides): Promise<[string]>;

    "cakeStaker()"(overrides?: CallOverrides): Promise<[string]>;

    claimCake(
      nft: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimCake(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimableCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimableCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimedCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimedCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pointsCorrection(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pointsCorrection(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakedCakeBalances(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "stakedCakeBalances(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStakedCakeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStakedCakeBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  accumulativeCakeOf(
    nft: string,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "accumulativeCakeOf(address,uint256)"(
    nft: string,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cake(overrides?: CallOverrides): Promise<string>;

  "cake()"(overrides?: CallOverrides): Promise<string>;

  cakeStaker(overrides?: CallOverrides): Promise<string>;

  "cakeStaker()"(overrides?: CallOverrides): Promise<string>;

  claimCake(
    nft: string,
    nftId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimCake(address,uint256)"(
    nft: string,
    nftId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimableCakeOf(
    nft: string,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimableCakeOf(address,uint256)"(
    nft: string,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimed(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimed(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimedCakeOf(
    nft: string,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimedCakeOf(address,uint256)"(
    nft: string,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pointsCorrection(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pointsCorrection(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakedCakeBalances(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stakedCakeBalances(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStakedCakeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakedCakeBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    accumulativeCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accumulativeCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cake(overrides?: CallOverrides): Promise<string>;

    "cake()"(overrides?: CallOverrides): Promise<string>;

    cakeStaker(overrides?: CallOverrides): Promise<string>;

    "cakeStaker()"(overrides?: CallOverrides): Promise<string>;

    claimCake(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimCake(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimedCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimedCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pointsCorrection(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pointsCorrection(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedCakeBalances(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedCakeBalances(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakedCakeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedCakeBalance()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    ClaimCake(
      nft: string | null,
      nftId: BigNumberish | null,
      to: string | null,
      claimed: null
    ): EventFilter;

    DistributeCake(by: string | null, distributed: null): EventFilter;
  };

  estimateGas: {
    accumulativeCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accumulativeCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cake(overrides?: CallOverrides): Promise<BigNumber>;

    "cake()"(overrides?: CallOverrides): Promise<BigNumber>;

    cakeStaker(overrides?: CallOverrides): Promise<BigNumber>;

    "cakeStaker()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimCake(
      nft: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimCake(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimableCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimedCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimedCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pointsCorrection(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pointsCorrection(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedCakeBalances(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedCakeBalances(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakedCakeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedCakeBalance()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accumulativeCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accumulativeCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cakeStaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cakeStaker()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimCake(
      nft: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimCake(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimableCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimedCakeOf(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimedCakeOf(address,uint256)"(
      nft: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pointsCorrection(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pointsCorrection(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedCakeBalances(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakedCakeBalances(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakedCakeBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalStakedCakeBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
