/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { CakeDividend } from "../CakeDividend";

export class CakeDividend__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _cake: string,
    _cakeStaker: string,
    overrides?: Overrides
  ): Promise<CakeDividend> {
    return super.deploy(
      _cake,
      _cakeStaker,
      overrides || {}
    ) as Promise<CakeDividend>;
  }
  getDeployTransaction(
    _cake: string,
    _cakeStaker: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_cake, _cakeStaker, overrides || {});
  }
  attach(address: string): CakeDividend {
    return super.attach(address) as CakeDividend;
  }
  connect(signer: Signer): CakeDividend__factory {
    return super.connect(signer) as CakeDividend__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CakeDividend {
    return new Contract(address, _abi, signerOrProvider) as CakeDividend;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_cake",
        type: "address",
      },
      {
        internalType: "contract ICakeStaker",
        name: "_cakeStaker",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC721",
        name: "nft",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "claimed",
        type: "uint256",
      },
    ],
    name: "ClaimCake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "by",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "distributed",
        type: "uint256",
      },
    ],
    name: "DistributeCake",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    name: "accumulativeCakeOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cake",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cakeStaker",
    outputs: [
      {
        internalType: "contract ICakeStaker",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    name: "claimCake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    name: "claimableCakeOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    name: "claimedCakeOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "pointsCorrection",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakedCakeBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStakedCakeBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600080556000600155600060035534801561001e57600080fd5b50604051610af6380380610af683398101604081905261003d9161005b565b6001600160601b0319606092831b8116608052911b1660a0526100ad565b6000806040838503121561006e57600080fd5b825161007981610095565b602084015190925061008a81610095565b809150509250929050565b6001600160a01b03811681146100aa57600080fd5b50565b60805160601c60a05160601c6109fc6100fa6000396000818160d7015281816104f2015261064d0152600081816101e20152818161030c0152818161045401526106c801526109fc6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639eebfb26116100665780639eebfb2614610167578063a11269e51461017c578063a53b9eea146101a7578063dce17484146101dd578063f7372ea01461020457600080fd5b80630affa6f1146100a357806314738d3b146100bf5780631d1dc697146100d25780634dd6c8de146101115780635b2e221b1461013c575b600080fd5b6100ac60015481565b6040519081526020015b60405180910390f35b6100ac6100cd3660046108a2565b610217565b6100f97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b6565b6100ac61011f3660046108a2565b600560209081526000928352604080842090915290825290205481565b6100ac61014a3660046108a2565b600260209081526000928352604080842090915290825290205481565b61017a6101753660046108a2565b610258565b005b6100ac61018a3660046108a2565b600460209081526000928352604080842090915290825290205481565b6100ac6101b53660046108a2565b6001600160a01b03919091166000908152600560209081526040808320938352929052205490565b6100f97f000000000000000000000000000000000000000000000000000000000000000081565b6100ac6102123660046108a2565b61042d565b6001600160a01b0382166000908152600560209081526040808320848452909152812054610245848461042d565b61024f9190610981565b90505b92915050565b61026061062f565b600061026c83836107d2565b90508015610428576001600160a01b0383166000908152600560209081526040808320858452909152812080548392906102a7908490610928565b9091555050604051818152339083906001600160a01b038616907ff371029fbeb9d5ccc35b0e98232fa84414b7f053cebed0eb401b6640fbf9716c9060200160405180910390a46040516331a9108f60e11b8152600481018390526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163a9059cbb91861690636352211e9060240160206040518083038186803b15801561035857600080fd5b505afa15801561036c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610390919061085c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b1580156103d857600080fd5b505af11580156103ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104109190610880565b50806000808282546104229190610981565b90915550505b505050565b6003546001546000919015610625576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561049e57600080fd5b505afa1580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d691906108ce565b604051631175a1dd60e01b8152600060048201523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631175a1dd9060440160206040518083038186803b15801561053c57600080fd5b505afa158015610550573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057491906108ce565b61057e9190610928565b9050600080548261058f9190610981565b905080156105bf576001546105a8600160801b83610962565b6105b29190610940565b6105bc9084610928565b92505b6001600160a01b038616600081815260046020908152604080832089845282528083205493835260028252808320898452909152902054600160801b91906106079086610962565b61061191906108e7565b61061b9190610940565b9350505050610252565b5060009392505050565b600154156107d057604051631058d28160e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631058d28190602401600060405180830381600087803b15801561069957600080fd5b505af11580156106ad573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b15801561071357600080fd5b505afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b91906108ce565b9050600080548261075c9190610981565b905080156107cb57600154610775600160801b83610962565b61077f9190610940565b600360008282546107909190610928565b909155505060405181815233907f7e3443847968b8ae43a305870aa25aa7fc542ea63833182a4b715b3f82cd01619060200160405180910390a25b506000555b565b6001600160a01b038216600090815260056020908152604080832084845290915281205461024584846001600160a01b0382166000818152600460209081526040808320858452825280832054938352600282528083208584529091528120546003549192600160801b92909161084891610962565b61085291906108e7565b61024f9190610940565b60006020828403121561086e57600080fd5b8151610879816109ae565b9392505050565b60006020828403121561089257600080fd5b8151801515811461087957600080fd5b600080604083850312156108b557600080fd5b82356108c0816109ae565b946020939093013593505050565b6000602082840312156108e057600080fd5b5051919050565b600080821280156001600160ff1b038490038513161561090957610909610998565b600160ff1b839003841281161561092257610922610998565b50500190565b6000821982111561093b5761093b610998565b500190565b60008261095d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561097c5761097c610998565b500290565b60008282101561099357610993610998565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146109c357600080fd5b5056fea2646970667358221220774c446712c34b0ea05d8a6da92efb8b1b2a90c65c41d5b41fbc3e0cf884d74664736f6c63430008050033";
